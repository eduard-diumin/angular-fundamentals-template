{"ast":null,"code":"import { BehaviorSubject, finalize, map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MockDataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.charactersLoader$ = new BehaviorSubject(false);\n    this.planetsLoader$ = new BehaviorSubject(false);\n  }\n  getCharacters(searchTerm) {\n    this.charactersLoader$.next(true);\n    const queryParams = searchTerm ? `?search=${searchTerm}` : \"\";\n    return this.httpClient.get(`https://swapi.py4e.com/api/people/${queryParams}`).pipe(finalize(() => this.charactersLoader$.next(false))).pipe(map(response => response.results));\n  }\n  getPlanets(searchTerm) {\n    this.planetsLoader$.next(true);\n    const queryParams = searchTerm ? `?search=${searchTerm}` : \"\";\n    return this.httpClient.get(`https://swapi.py4e.com/api/planets/${queryParams}`).pipe(finalize(() => this.planetsLoader$.next(false))).pipe(map(response => response.results));\n  }\n  getCharactersLoader() {\n    return this.charactersLoader$;\n  }\n  getPlanetLoader() {\n    return this.planetsLoader$;\n  }\n}\nMockDataService.ɵfac = function MockDataService_Factory(t) {\n  return new (t || MockDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nMockDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MockDataService,\n  factory: MockDataService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,GAAG,QAAoB,MAAM;;;AAKjE,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHvB,sBAAiB,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IACvD,mBAAc,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;EAEd;EAE7CM,aAAa,CAACC,UAAmB;IAC/B,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;IACjC,MAAMC,WAAW,GAAWH,UAAU,GAAG,WAAWA,UAAU,EAAE,GAAG,EAAE;IACrE,OAAO,IAAI,CAACF,UAAU,CACnBM,GAAG,CAAM,qCAAqCD,WAAW,EAAE,CAAC,CAC5DE,IAAI,CAACX,QAAQ,CAAC,MAAM,IAAI,CAACO,iBAAiB,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CACxDG,IAAI,CAACV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EAC9C;EAEAC,UAAU,CAACR,UAAmB;IAC5B,IAAI,CAACS,cAAc,CAACP,IAAI,CAAC,IAAI,CAAC;IAC9B,MAAMC,WAAW,GAAWH,UAAU,GAAG,WAAWA,UAAU,EAAE,GAAG,EAAE;IACrE,OAAO,IAAI,CAACF,UAAU,CACnBM,GAAG,CAAM,sCAAsCD,WAAW,EAAE,CAAC,CAC7DE,IAAI,CAACX,QAAQ,CAAC,MAAM,IAAI,CAACe,cAAc,CAACP,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CACrDG,IAAI,CAACV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EAC9C;EAEAG,mBAAmB;IACjB,OAAO,IAAI,CAACT,iBAAiB;EAC/B;EAEAU,eAAe;IACb,OAAO,IAAI,CAACF,cAAc;EAC5B;;AA9BWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFd;AAAM","names":["BehaviorSubject","finalize","map","MockDataService","constructor","httpClient","getCharacters","searchTerm","charactersLoader$","next","queryParams","get","pipe","response","results","getPlanets","planetsLoader$","getCharactersLoader","getPlanetLoader","factory","providedIn"],"sourceRoot":"","sources":["/Users/eduarddiumin/Documents/StudyFullStack/Angular-EPAM/angular-fundamentals-template/src/app/mock-data.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, finalize, map, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class MockDataService {\n  public charactersLoader$ = new BehaviorSubject<boolean>(false);\n  public planetsLoader$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private httpClient: HttpClient) {}\n\n  getCharacters(searchTerm?: string): Observable<any> {\n    this.charactersLoader$.next(true);\n    const queryParams: string = searchTerm ? `?search=${searchTerm}` : \"\";\n    return this.httpClient\n      .get<any>(`https://swapi.py4e.com/api/people/${queryParams}`)\n      .pipe(finalize(() => this.charactersLoader$.next(false)))\n      .pipe(map((response) => response.results));\n  }\n\n  getPlanets(searchTerm?: string): Observable<any> {\n    this.planetsLoader$.next(true);\n    const queryParams: string = searchTerm ? `?search=${searchTerm}` : \"\";\n    return this.httpClient\n      .get<any>(`https://swapi.py4e.com/api/planets/${queryParams}`)\n      .pipe(finalize(() => this.planetsLoader$.next(false)))\n      .pipe(map((response) => response.results));\n  }\n\n  getCharactersLoader(): Observable<boolean> {\n    return this.charactersLoader$;\n  }\n\n  getPlanetLoader(): Observable<boolean> {\n    return this.planetsLoader$;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}