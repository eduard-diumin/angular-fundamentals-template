{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nlet CourseFormComponent = class CourseFormComponent {\n  constructor(fb, library, coursesStore, router, route) {\n    this.fb = fb;\n    this.library = library;\n    this.coursesStore = coursesStore;\n    this.router = router;\n    this.route = route;\n    this.isEditMode = false;\n    this.courseId = null;\n    this.submitted = false;\n    this.allAuthors = [];\n    this.courseAuthors = [];\n    library.addIconPacks(fas);\n    this.courseForm = this.fb.group({\n      title: [\"\", [Validators.required, Validators.minLength(2)]],\n      description: [\"\", [Validators.required, Validators.minLength(2)]],\n      duration: [0, [Validators.required, Validators.min(0)]],\n      authors: this.fb.array([]),\n      author: [\"\", [Validators.required, Validators.minLength(2), Validators.pattern(\"^[a-zA-Z0-9]+$\")]]\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.courseId = params.get(\"id\");\n      this.isEditMode = !!this.courseId;\n      if (this.isEditMode && this.courseId) {\n        this.coursesStore.getCourse(this.courseId).subscribe(course => {\n          if (course) {\n            this.courseForm.patchValue({\n              title: course.title,\n              description: course.description,\n              duration: course.duration\n            });\n            // TODO: authors integration\n          }\n        });\n      }\n    });\n\n    this.coursesStore.getAllAuthors().subscribe(authors => {\n      this.allAuthors = authors;\n    });\n  }\n  get authors() {\n    return this.courseForm.get(\"authors\");\n  }\n  get newAuthorGroup() {\n    return this.courseForm.get(\"newAuthor\");\n  }\n  addAuthorToCourse(author) {\n    this.courseAuthors.push(author);\n    this.authors.push(new FormControl(author));\n    this.allAuthors = this.allAuthors.filter(a => a.id !== author.id);\n  }\n  removeAuthorFromCourse(author, index) {\n    this.allAuthors.push(author);\n    this.courseAuthors = this.courseAuthors.filter(a => a.id !== author.id);\n    this.authors.removeAt(index);\n  }\n  createAuthor() {\n    const authorControl = this.courseForm.get(\"author\");\n    const name = authorControl?.value;\n    if (authorControl?.valid) {\n      const newAuthor = {\n        id: Math.random().toString(36).substring(2, 10),\n        name\n      };\n      this.allAuthors.push(newAuthor);\n      authorControl.reset();\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.courseForm.valid && this.courseAuthors.length > 0) {\n      const courseData = {\n        ...this.courseForm.value,\n        authors: this.courseAuthors.map(a => a.id)\n      };\n      if (this.isEditMode && this.courseId) {\n        this.coursesStore.editCourse(this.courseId, courseData);\n      } else {\n        this.coursesStore.createCourse(courseData);\n      }\n      this.router.navigate([\"/courses\"]);\n    }\n  }\n};\nCourseFormComponent = __decorate([Component({\n  selector: \"app-course-form\",\n  templateUrl: \"./course-form.component.html\",\n  styleUrls: [\"./course-form.component.scss\"]\n})], CourseFormComponent);\nexport { CourseFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}