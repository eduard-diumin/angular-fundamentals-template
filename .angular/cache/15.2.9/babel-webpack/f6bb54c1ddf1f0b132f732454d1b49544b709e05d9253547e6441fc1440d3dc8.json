{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./session-storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, sessionStorage) {\n      this.http = http;\n      this.router = router;\n      this.sessionStorage = sessionStorage;\n      this.isAuthorized$$ = new BehaviorSubject(false);\n      this.isAuthorized$ = this.isAuthorized$$.asObservable();\n      this.isAuthorized$$.next(!!this.sessionStorage.getToken());\n    }\n    get isAuthorized() {\n      return this.isAuthorized$$.value;\n    }\n    login(email, password) {\n      return this.http.post(\"/api/auth/login\", {\n        email,\n        password\n      });\n    }\n    logout() {\n      this.sessionStorage.deleteToken();\n      this.isAuthorized$$.next(false);\n      this.router.navigate([\"/login\"]);\n    }\n    register(data) {\n      return this.http.post(\"/api/auth/register\", data);\n    }\n    setToken(token) {\n      this.sessionStorage.setToken(token);\n      this.isAuthorized$$.next(true);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SessionStorageService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}